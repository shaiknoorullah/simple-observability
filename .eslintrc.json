{
	"root": true,
	"parser": "@typescript-eslint/parser",
	"parserOptions": {
	  "project": "./tsconfig.json",
	  "ecmaVersion": 2020,
	  "sourceType": "module"
	},
	"plugins": [
	  "@typescript-eslint",
	  "import",
	  "prettier"
	],
	"extends": [
	  "eslint:recommended",
	  "plugin:@typescript-eslint/recommended",
	  "plugin:@typescript-eslint/recommended-requiring-type-checking",
	  "plugin:import/errors",
	  "plugin:import/warnings",
	  "plugin:import/typescript",
	  "plugin:prettier/recommended"
	],
	"rules": {
	  // TypeScript Specific Rules
	  "@typescript-eslint/explicit-function-return-type": [
		"error",
		{
		  "allowExpressions": true,
		  "allowTypedFunctionExpressions": true,
		  "allowHigherOrderFunctions": true
		}
	  ],
	  "@typescript-eslint/explicit-member-accessibility": [
		"error",
		{
		  "accessibility": "explicit"
		}
	  ],
	  "@typescript-eslint/no-explicit-any": "error",
	  "@typescript-eslint/no-floating-promises": "error",
	  "@typescript-eslint/no-unsafe-assignment": "error",
	  "@typescript-eslint/no-unsafe-call": "error",
	  "@typescript-eslint/no-unsafe-member-access": "error",
	  "@typescript-eslint/no-unsafe-return": "error",
	  "@typescript-eslint/no-unused-vars": [
		"error",
		{
		  "vars": "all",
		  "args": "after-used",
		  "ignoreRestSiblings": true
		}
	  ],
	  "@typescript-eslint/ban-types": [
		"error",
		{
		  "types": {
			"Object": {
			  "message": "Avoid using the `Object` type. Did you mean `object`?"
			},
			"Function": {
			  "message": "Avoid using the `Function` type. Prefer a specific function type, like `() => void`."
			},
			"Boolean": {
			  "message": "Avoid using the `Boolean` type. Did you mean `boolean`?"
			},
			"Number": {
			  "message": "Avoid using the `Number` type. Did you mean `number`?"
			},
			"String": {
			  "message": "Avoid using the `String` type. Did you mean `string`?"
			},
			"Symbol": {
			  "message": "Avoid using the `Symbol` type. Did you mean `symbol`?"
			}
		  }
		}
	  ],
	  "@typescript-eslint/no-inferrable-types": [
		"error",
		{
		  "ignoreParameters": true,
		  "ignoreProperties": true
		}
	  ],
	  "@typescript-eslint/consistent-type-definitions": ["error", "interface"],
	  "@typescript-eslint/no-empty-interface": [
		"error",
		{
		  "allowSingleExtends": true
		}
	  ],
	  "@typescript-eslint/explicit-module-boundary-types": "off",
	  "@typescript-eslint/no-use-before-define": [
		"error",
		{
		  "functions": false,
		  "classes": true,
		  "variables": true,
		  "typedefs": true
		}
	  ],
  
	  // Import Rules
	  "import/order": [
		"error",
		{
		  "groups": [
			["builtin", "external"],
			["internal", "parent", "sibling", "index"]
		  ],
		  "newlines-between": "always",
		  "alphabetize": {
			"order": "asc",
			"caseInsensitive": true
		  }
		}
	  ],
	  "import/no-unresolved": "error",
	  "import/newline-after-import": ["error", { "count": 1 }],
	  "import/no-duplicates": "error",
  
	  // Prettier Rules
	  "prettier/prettier": [
		"error",
		{
		  "singleQuote": true,
		  "semi": true,
		  "trailingComma": "all",
		  "printWidth": 80,
		  "tabWidth": 2,
		  "endOfLine": "auto"
		}
	  ],
  
	  // Best Practices
	  "eqeqeq": ["error", "always"],
	  "no-else-return": ["error", { "allowElseIf": false }],
	  "curly": ["error", "all"],
	  "dot-notation": "error",
	  "no-eval": "error",
	  "no-implied-eval": "error",
	  "no-return-await": "error",
	  "no-shadow": [
		"error",
		{
		  "builtinGlobals": false,
		  "hoist": "functions",
		  "allow": []
		}
	  ],
	  "no-console": ["warn", { "allow": ["warn", "error"] }],
	  "no-unused-expressions": [
		"error",
		{
		  "allowShortCircuit": true,
		  "allowTernary": true,
		  "allowTaggedTemplates": true
		}
	  ]
	},
	"settings": {
	  "import/parsers": {
		"@typescript-eslint/parser": [".ts", ".tsx"]
	  },
	  "import/resolver": {
		"typescript": {
		  "alwaysTryTypes": true,
		  "project": "./tsconfig.json"
		}
	  }
	}
  }
  